-- Add recurrence and resource management to appointments

-- Create therapy room model
CREATE TABLE "therapy_rooms" (
  "id" BIGSERIAL PRIMARY KEY,
  "name" TEXT NOT NULL,
  "capacity" INTEGER,
  "description" TEXT,
  "equipment" TEXT,
  "is_active" BOOLEAN NOT NULL DEFAULT true,
  "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" TIMESTAMP(3) NOT NULL,
  "created_by" BIGINT,
  "updated_by" BIGINT,
  FOREIGN KEY ("created_by") REFERENCES "users"("id"),
  FOREIGN KEY ("updated_by") REFERENCES "users"("id")
);

-- Create therapy equipment model
CREATE TABLE "therapy_equipment" (
  "id" BIGSERIAL PRIMARY KEY,
  "name" TEXT NOT NULL,
  "description" TEXT,
  "quantity" INTEGER NOT NULL DEFAULT 1,
  "is_available" BOOLEAN NOT NULL DEFAULT true,
  "notes" TEXT,
  "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" TIMESTAMP(3) NOT NULL,
  "created_by" BIGINT,
  "updated_by" BIGINT,
  FOREIGN KEY ("created_by") REFERENCES "users"("id"),
  FOREIGN KEY ("updated_by") REFERENCES "users"("id")
);

-- Create recurrence pattern model
CREATE TABLE "appointment_recurrence_patterns" (
  "id" BIGSERIAL PRIMARY KEY,
  "frequency" TEXT NOT NULL, -- DAILY, WEEKLY, MONTHLY, etc.
  "interval" INTEGER NOT NULL DEFAULT 1, -- Every X days/weeks/months
  "days_of_week" TEXT, -- JSON array of days (e.g., ["MON", "WED", "FRI"])
  "start_date" TIMESTAMP(3) NOT NULL,
  "end_date" TIMESTAMP(3),
  "occurrence_count" INTEGER, -- Limited number of occurrences
  "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" TIMESTAMP(3) NOT NULL,
  "created_by" BIGINT,
  "updated_by" BIGINT,
  FOREIGN KEY ("created_by") REFERENCES "users"("id"),
  FOREIGN KEY ("updated_by") REFERENCES "users"("id")
);

-- Create appointment staff association (for multiple therapists per appointment)
CREATE TABLE "appointment_staff" (
  "appointment_id" BIGINT NOT NULL,
  "user_id" BIGINT NOT NULL,
  "role" TEXT NOT NULL, -- PRIMARY_THERAPIST, ASSISTANT, SUPERVISOR, etc.
  "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY ("appointment_id", "user_id"),
  FOREIGN KEY ("appointment_id") REFERENCES "appointments"("id") ON DELETE CASCADE,
  FOREIGN KEY ("user_id") REFERENCES "users"("id") ON DELETE CASCADE
);

-- Create appointment equipment association
CREATE TABLE "appointment_equipment" (
  "appointment_id" BIGINT NOT NULL,
  "equipment_id" BIGINT NOT NULL,
  "quantity" INTEGER NOT NULL DEFAULT 1,
  "notes" TEXT,
  "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY ("appointment_id", "equipment_id"),
  FOREIGN KEY ("appointment_id") REFERENCES "appointments"("id") ON DELETE CASCADE,
  FOREIGN KEY ("equipment_id") REFERENCES "therapy_equipment"("id") ON DELETE CASCADE
);

-- Add columns to appointments table
ALTER TABLE "appointments" 
  ADD COLUMN "room_id" BIGINT,
  ADD COLUMN "recurrence_pattern_id" BIGINT,
  ADD COLUMN "parent_appointment_id" BIGINT,
  ADD COLUMN "is_recurring" BOOLEAN NOT NULL DEFAULT false,
  ADD COLUMN "max_participants" INTEGER,
  ADD COLUMN "is_group_session" BOOLEAN NOT NULL DEFAULT false,
  ADD FOREIGN KEY ("room_id") REFERENCES "therapy_rooms"("id"),
  ADD FOREIGN KEY ("recurrence_pattern_id") REFERENCES "appointment_recurrence_patterns"("id") ON DELETE SET NULL,
  ADD FOREIGN KEY ("parent_appointment_id") REFERENCES "appointments"("id") ON DELETE SET NULL;

-- Create appointment_group_participants table for group sessions
CREATE TABLE "appointment_group_participants" (
  "appointment_id" BIGINT NOT NULL,
  "learner_id" BIGINT NOT NULL,
  "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "notes" TEXT,
  PRIMARY KEY ("appointment_id", "learner_id"),
  FOREIGN KEY ("appointment_id") REFERENCES "appointments"("id") ON DELETE CASCADE,
  FOREIGN KEY ("learner_id") REFERENCES "learners"("id") ON DELETE CASCADE
);

-- Create RecurrenceFrequency enum type
CREATE TYPE "RecurrenceFrequency" AS ENUM ('DAILY', 'WEEKLY', 'BIWEEKLY', 'MONTHLY', 'CUSTOM');

-- Create TherapistRole enum type
CREATE TYPE "TherapistRole" AS ENUM ('PRIMARY', 'ASSISTANT', 'SUPERVISOR', 'OBSERVER');
