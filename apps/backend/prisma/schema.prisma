generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    BigInt          @id @default(autoincrement())
  email                 String          @unique
  password              String
  firstName             String          @map("first_name")
  lastName              String          @map("last_name")
  phone                 String?
  role                  UserRole        @default(THERAPIST)
  isActive              Boolean         @default(true) @map("is_active")
  createdAt             DateTime        @default(now()) @map("created_at")
  updatedAt             DateTime        @updatedAt @map("updated_at")
  createdBy             BigInt?         @map("created_by")
  updatedBy             BigInt?         @map("updated_by")
  createdAppointments   Appointment[]   @relation("AppointmentCreatedBy")
  appointments          Appointment[]
  updatedAppointments   Appointment[]   @relation("AppointmentUpdatedBy")
  createdClients        Client[]        @relation("ClientCreatedBy")
  clients               Client[]        @relation("TherapistToClient")
  updatedClients        Client[]        @relation("ClientUpdatedBy")
  createdCommunications Communication[] @relation("CommunicationCreatedBy")
  updatedCommunications Communication[] @relation("CommunicationUpdatedBy")
  sentCommunications    Communication[] @relation("UserToCommunication")
  createdLearners       Learner[]       @relation("LearnerCreatedBy")
  learners              Learner[]       @relation("InstructorToLearner")
  updatedLearners       Learner[]       @relation("LearnerUpdatedBy")
  createdByUser         User?           @relation("UserCreatedBy", fields: [createdBy], references: [id])
  createdUsers          User[]          @relation("UserCreatedBy")
  updatedByUser         User?           @relation("UserUpdatedBy", fields: [updatedBy], references: [id])
  updatedUsers          User[]          @relation("UserUpdatedBy")
  createdWaitlists      Waitlist[]      @relation("WaitlistCreatedBy")
  updatedWaitlists      Waitlist[]      @relation("WaitlistUpdatedBy")

  @@map("users")
}

model Client {
  id             BigInt          @id @default(autoincrement())
  firstName      String          @map("first_name")
  lastName       String          @map("last_name")
  email          String?         @unique
  phone          String
  address        String?
  status         ClientStatus    @default(ACTIVE)
  priority       Priority        @default(MEDIUM)
  notes          String?
  therapistId    BigInt?         @map("therapist_id")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  createdBy      BigInt?         @map("created_by")
  updatedBy      BigInt?         @map("updated_by")
  appointments   Appointment[]
  createdByUser  User?           @relation("ClientCreatedBy", fields: [createdBy], references: [id])
  therapist      User?           @relation("TherapistToClient", fields: [therapistId], references: [id])
  updatedByUser  User?           @relation("ClientUpdatedBy", fields: [updatedBy], references: [id])
  communications Communication[] @relation("ClientToCommunication")
  learners       Learner[]
  waitlist       Waitlist?

  @@map("clients")
}

model Learner {
  id             BigInt          @id @default(autoincrement())
  firstName      String          @map("first_name")
  lastName       String          @map("last_name")
  dateOfBirth    DateTime?       @map("date_of_birth")
  gender         String?
  course         String?
  schedule       String?
  status         LearnerStatus   @default(ACTIVE)
  notes          String?
  clientId       BigInt          @map("client_id")
  instructorId   BigInt?         @map("instructor_id")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  createdBy      BigInt?         @map("created_by")
  updatedBy      BigInt?         @map("updated_by")
  appointments   Appointment[]
  communications Communication[] @relation("LearnerToCommunication")
  client         Client          @relation(fields: [clientId], references: [id])
  createdByUser  User?           @relation("LearnerCreatedBy", fields: [createdBy], references: [id])
  instructor     User?           @relation("InstructorToLearner", fields: [instructorId], references: [id])
  updatedByUser  User?           @relation("LearnerUpdatedBy", fields: [updatedBy], references: [id])

  @@map("learners")
}

model Appointment {
  id                 BigInt            @id @default(autoincrement())
  title              String
  startTime          DateTime          @map("start_time")
  endTime            DateTime          @map("end_time")
  status             AppointmentStatus @default(SCHEDULED)
  location           String?
  notes              String?
  clientId           BigInt            @map("client_id")
  learnerId          BigInt?           @map("learner_id")
  therapistId        BigInt            @map("therapist_id")
  cancellationReason String?           @map("cancellation_reason")
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")
  createdBy          BigInt?           @map("created_by")
  updatedBy          BigInt?           @map("updated_by")
  client             Client            @relation(fields: [clientId], references: [id])
  createdByUser      User?             @relation("AppointmentCreatedBy", fields: [createdBy], references: [id])
  learner            Learner?          @relation(fields: [learnerId], references: [id])
  therapist          User              @relation(fields: [therapistId], references: [id])
  updatedByUser      User?             @relation("AppointmentUpdatedBy", fields: [updatedBy], references: [id])
  communications     Communication[]   @relation("AppointmentToCommunication")

  @@map("appointments")
}

model Communication {
  id            BigInt            @id @default(autoincrement())
  type          CommunicationType
  subject       String
  content       String
  sentAt        DateTime          @default(now()) @map("sent_at")
  notes         String?
  clientId      BigInt            @map("client_id")
  learnerId     BigInt?           @map("learner_id")
  appointmentId BigInt?           @map("appointment_id")
  userId        BigInt?           @map("user_id")
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime?         @updatedAt @map("updated_at")
  createdBy     BigInt?           @map("created_by")
  updatedBy     BigInt?           @map("updated_by")
  appointment   Appointment?      @relation("AppointmentToCommunication", fields: [appointmentId], references: [id])
  client        Client            @relation("ClientToCommunication", fields: [clientId], references: [id])
  createdByUser User?             @relation("CommunicationCreatedBy", fields: [createdBy], references: [id])
  learner       Learner?          @relation("LearnerToCommunication", fields: [learnerId], references: [id])
  updatedByUser User?             @relation("CommunicationUpdatedBy", fields: [updatedBy], references: [id])
  user          User?             @relation("UserToCommunication", fields: [userId], references: [id])

  @@map("communications")
}

model Waitlist {
  id                BigInt         @id @default(autoincrement())
  serviceType       ServiceType    @map("service_type")
  status            WaitlistStatus @default(WAITING)
  requestDate       DateTime       @map("request_date")
  preferredSchedule String?        @map("preferred_schedule")
  notes             String?
  clientId          BigInt         @unique @map("client_id")
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  createdBy         BigInt?        @map("created_by")
  updatedBy         BigInt?        @map("updated_by")
  client            Client         @relation(fields: [clientId], references: [id])
  createdByUser     User?          @relation("WaitlistCreatedBy", fields: [createdBy], references: [id])
  updatedByUser     User?          @relation("WaitlistUpdatedBy", fields: [updatedBy], references: [id])

  @@map("waitlist")
}

model Practice {
  id               BigInt   @id @default(autoincrement())
  name             String
  address          String?
  city             String?
  state            String?
  zipCode          String?  @map("zip_code")
  phone            String?
  email            String?
  website          String?
  hoursOfOperation String?  @map("hours_of_operation")
  billingName      String?  @map("billing_name") // Name on card/account
  billingEmail     String?  @map("billing_email") // Email for billing notifications
  billingAddress   String?  @map("billing_address")
  billingCity      String?  @map("billing_city")
  billingState     String?  @map("billing_state")
  billingZipCode   String?  @map("billing_zip_code")
  stripeCustomerId     String?  @unique @map("stripe_customer_id")
  stripeSubscriptionId String?  @unique @map("stripe_subscription_id")
  subscriptionStatus String?  @default("inactive") @map("subscription_status") // e.g., active, inactive, trialing, past_due
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@map("practice")
}

enum UserRole {
  ADMIN
  THERAPIST
  STAFF

  @@map("user_role")
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
  WAITLIST

  @@map("client_status")
}

enum LearnerStatus {
  ACTIVE
  INACTIVE
  ONHOLD
  COMPLETED

  @@map("learner_status")
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  NOSHOW

  @@map("appointment_status")
}

enum Priority {
  LOW
  MEDIUM
  HIGH

  @@map("priority")
}

enum CommunicationType {
  EMAIL
  PHONE
  INPERSON
  VIDEO
  SMS

  @@map("communication_type")
}

enum ServiceType {
  THERAPY
  ASSESSMENT
  CONSULTATION

  @@map("service_type")
}

enum WaitlistStatus {
  WAITING
  PLACED
  CANCELLED

  @@map("waitlist_status")
}
