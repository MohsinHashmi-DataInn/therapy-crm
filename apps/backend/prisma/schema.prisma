generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model appointment_equipment {
  appointment_id    BigInt
  equipment_id      BigInt
  quantity          Int               @default(1)
  notes             String?
  created_at        DateTime          @default(now())
  appointments      appointments      @relation(fields: [appointment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  therapy_equipment therapy_equipment @relation(fields: [equipment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([appointment_id, equipment_id])
}

model appointment_group_participants {
  appointment_id BigInt
  learner_id     BigInt
  notes          String?
  created_at     DateTime     @default(now())
  appointments   appointments @relation(fields: [appointment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  learners       learners     @relation(fields: [learner_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([appointment_id, learner_id])
}

model appointment_recurrence_patterns {
  id                                                      BigInt               @id @default(autoincrement())
  frequency                                               recurrence_frequency
  interval                                                Int                  @default(1)
  days_of_week                                            String?
  start_date                                              DateTime
  end_date                                                DateTime?
  occurrence_count                                        Int?
  created_at                                              DateTime             @default(now())
  updated_at                                              DateTime
  created_by                                              BigInt?
  updated_by                                              BigInt?
  users_appointment_recurrence_patterns_created_byTousers users?               @relation("appointment_recurrence_patterns_created_byTousers", fields: [created_by], references: [id], onUpdate: NoAction, map: "fk_recurrence_patterns_created_by")
  users_appointment_recurrence_patterns_updated_byTousers users?               @relation("appointment_recurrence_patterns_updated_byTousers", fields: [updated_by], references: [id], onUpdate: NoAction, map: "fk_recurrence_patterns_updated_by")
  appointments                                            appointments[]
}

model appointment_staff {
  appointment_id BigInt
  user_id        BigInt
  role           therapist_role
  created_at     DateTime       @default(now())
  appointments   appointments   @relation(fields: [appointment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_appointment_staff_appointment")
  users          users          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_appointment_staff_user")

  @@id([appointment_id, user_id])
}

model appointments {
  id                                     BigInt                           @id @default(autoincrement())
  title                                  String
  start_time                             DateTime
  end_time                               DateTime
  status                                 appointment_status               @default(SCHEDULED)
  location                               String?
  notes                                  String?
  client_id                              BigInt
  learner_id                             BigInt?
  therapist_id                           BigInt
  cancellation_reason                    String?
  created_at                             DateTime                         @default(now())
  updated_at                             DateTime
  created_by                             BigInt?
  updated_by                             BigInt?
  is_recurring                           Boolean                          @default(false)
  is_group_session                       Boolean                          @default(false)
  max_participants                       Int?
  room_id                                BigInt?
  recurrence_pattern_id                  BigInt?
  parent_appointment_id                  BigInt?
  location_id                            BigInt?
  appointment_equipment                  appointment_equipment[]
  appointment_group_participants         appointment_group_participants[]
  appointment_staff                      appointment_staff[]
  clients                                clients                          @relation(fields: [client_id], references: [id])
  users_appointments_created_byTousers   users?                           @relation("appointments_created_byTousers", fields: [created_by], references: [id])
  learners                               learners?                        @relation(fields: [learner_id], references: [id])
  users_appointments_therapist_idTousers users                            @relation("appointments_therapist_idTousers", fields: [therapist_id], references: [id])
  users_appointments_updated_byTousers   users?                           @relation("appointments_updated_byTousers", fields: [updated_by], references: [id])
  practice_locations                     practice_locations?              @relation(fields: [location_id], references: [id], onUpdate: NoAction, map: "fk_appointments_location")
  appointments                           appointments?                    @relation("appointmentsToappointments", fields: [parent_appointment_id], references: [id], onUpdate: NoAction, map: "fk_appointments_parent")
  other_appointments                     appointments[]                   @relation("appointmentsToappointments")
  appointment_recurrence_patterns        appointment_recurrence_patterns? @relation(fields: [recurrence_pattern_id], references: [id], onUpdate: NoAction, map: "fk_appointments_recurrence")
  therapy_rooms                          therapy_rooms?                   @relation(fields: [room_id], references: [id], onUpdate: NoAction, map: "fk_appointments_room")
  communications                         communications[]
  invoice_line_items                     invoice_line_items[]
}

model clients {
  id                                BigInt               @id @default(autoincrement())
  first_name                        String
  last_name                         String
  email                             String?              @unique
  phone                             String
  address                           String?
  status                            client_status        @default(ACTIVE)
  priority                          priority             @default(MEDIUM)
  notes                             String?
  therapist_id                      BigInt?
  created_at                        DateTime             @default(now())
  updated_at                        DateTime
  created_by                        BigInt?
  updated_by                        BigInt?
  preferred_language                language_code        @default(EN)
  requires_interpreter              Boolean              @default(false)
  interpreter_notes                 String?
  appointments                      appointments[]
  client_funding                    client_funding[]
  client_insurance                  client_insurance[]
  users_clients_created_byTousers   users?               @relation("clients_created_byTousers", fields: [created_by], references: [id])
  users_clients_therapist_idTousers users?               @relation("clients_therapist_idTousers", fields: [therapist_id], references: [id])
  users_clients_updated_byTousers   users?               @relation("clients_updated_byTousers", fields: [updated_by], references: [id])
  communications                    communications[]
  invoices                          invoices[]
  learners                          learners[]
  messaging_threads                 messaging_threads[]
  record_permissions                record_permissions[]
  waitlist                          waitlist?
}

model communications {
  id                                     BigInt                      @id @default(autoincrement())
  type                                   communication_type
  subject                                String
  content                                String
  sent_at                                DateTime                    @default(now())
  notes                                  String?
  client_id                              BigInt
  learner_id                             BigInt?
  appointment_id                         BigInt?
  user_id                                BigInt?
  created_at                             DateTime                    @default(now())
  updated_at                             DateTime?
  created_by                             BigInt?
  updated_by                             BigInt?
  is_encrypted                           Boolean                     @default(false)
  encryption_status                      encryption_status?
  security_classification                security_classification?
  retention_period_days                  Int?
  expiration_date                        DateTime?
  is_read                                Boolean                     @default(false)
  read_at                                DateTime?
  read_by                                BigInt?
  requires_signature                     Boolean                     @default(false)
  signed_at                              DateTime?
  signed_by                              BigInt?
  thread_id                              BigInt?
  communication_access_logs              communication_access_logs[]
  communication_attachments              communication_attachments[]
  appointments                           appointments?               @relation(fields: [appointment_id], references: [id])
  clients                                clients                     @relation(fields: [client_id], references: [id])
  users_communications_created_byTousers users?                      @relation("communications_created_byTousers", fields: [created_by], references: [id])
  learners                               learners?                   @relation(fields: [learner_id], references: [id])
  users_communications_updated_byTousers users?                      @relation("communications_updated_byTousers", fields: [updated_by], references: [id])
  users_communications_user_idTousers    users?                      @relation("communications_user_idTousers", fields: [user_id], references: [id])
  users_communications_read_byTousers    users?                      @relation("communications_read_byTousers", fields: [read_by], references: [id], onUpdate: NoAction, map: "fk_communications_read_by")
  users_communications_signed_byTousers  users?                      @relation("communications_signed_byTousers", fields: [signed_by], references: [id], onUpdate: NoAction, map: "fk_communications_signed_by")
  messaging_threads                      messaging_threads?          @relation(fields: [thread_id], references: [id], onUpdate: NoAction, map: "fk_communications_thread")
}

model learners {
  id                                  BigInt                           @id @default(autoincrement())
  first_name                          String
  last_name                           String
  date_of_birth                       DateTime?
  gender                              String?
  course                              String?
  schedule                            String?
  status                              learner_status                   @default(ACTIVE)
  notes                               String?
  client_id                           BigInt
  instructor_id                       BigInt?
  created_at                          DateTime                         @default(now())
  updated_at                          DateTime
  created_by                          BigInt?
  updated_by                          BigInt?
  appointment_group_participants      appointment_group_participants[]
  appointments                        appointments[]
  communications                      communications[]
  invoice_line_items                  invoice_line_items[]
  clients                             clients                          @relation(fields: [client_id], references: [id])
  users_learners_created_byTousers    users?                           @relation("learners_created_byTousers", fields: [created_by], references: [id])
  users_learners_instructor_idTousers users?                           @relation("learners_instructor_idTousers", fields: [instructor_id], references: [id])
  users_learners_updated_byTousers    users?                           @relation("learners_updated_byTousers", fields: [updated_by], references: [id])
  record_permissions                  record_permissions[]
}

model notification_preferences {
  id                  BigInt   @id @default(autoincrement())
  user_id             BigInt   @unique
  email_notifications Boolean  @default(true)
  sms_notifications   Boolean  @default(false)
  push_notifications  Boolean  @default(false)
  created_at          DateTime @default(now())
  updated_at          DateTime
  users               users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model practice {
  id                     BigInt               @id @default(autoincrement())
  name                   String
  address                String?
  city                   String?
  state                  String?
  zip_code               String?
  phone                  String?
  email                  String?
  website                String?
  hours_of_operation     String?
  created_at             DateTime             @default(now())
  updated_at             DateTime
  billing_address        String?
  billing_city           String?
  billing_email          String?
  billing_name           String?
  billing_state          String?
  billing_zip_code       String?
  stripe_customer_id     String?              @unique
  stripe_subscription_id String?              @unique
  subscription_status    String?              @default("inactive")
  primary_language       language_code        @default(EN)
  supported_languages    String?
  practice_locations     practice_locations[]
}

model therapy_equipment {
  id                                        BigInt                  @id @default(autoincrement())
  name                                      String
  description                               String?
  quantity                                  Int                     @default(1)
  is_available                              Boolean                 @default(true)
  notes                                     String?
  created_at                                DateTime                @default(now())
  updated_at                                DateTime
  created_by                                BigInt?
  updated_by                                BigInt?
  appointment_equipment                     appointment_equipment[]
  users_therapy_equipment_created_byTousers users?                  @relation("therapy_equipment_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_therapy_equipment_updated_byTousers users?                  @relation("therapy_equipment_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model therapy_rooms {
  id                                    BigInt              @id @default(autoincrement())
  name                                  String
  capacity                              Int?
  description                           String?
  equipment                             String?
  is_active                             Boolean             @default(true)
  created_at                            DateTime            @default(now())
  updated_at                            DateTime
  created_by                            BigInt?
  updated_by                            BigInt?
  location_id                           BigInt?
  appointments                          appointments[]
  practice_locations                    practice_locations? @relation(fields: [location_id], references: [id], onUpdate: NoAction, map: "fk_therapy_rooms_location")
  users_therapy_rooms_created_byTousers users?              @relation("therapy_rooms_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_therapy_rooms_updated_byTousers users?              @relation("therapy_rooms_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id                                                                                BigInt                            @id @default(autoincrement())
  email                                                                             String                            @unique
  password                                                                          String
  first_name                                                                        String
  last_name                                                                         String
  phone                                                                             String?
  role                                                                              user_role                         @default(THERAPIST)
  is_active                                                                         Boolean                           @default(true)
  created_at                                                                        DateTime                          @default(now())
  updated_at                                                                        DateTime
  created_by                                                                        BigInt?
  updated_by                                                                        BigInt?
  portal_access                                                                     Boolean                           @default(false)
  portal_last_login                                                                 DateTime?
  require_password_change                                                           Boolean                           @default(false)
  account_locked                                                                    Boolean                           @default(false)
  failed_login_attempts                                                             Int                               @default(0)
  password_reset_token                                                              String?
  password_reset_expires                                                            DateTime?
  last_password_change                                                              DateTime?
  preferred_language                                                                language_code                     @default(EN)
  secondary_languages                                                               String?
  analytics_metrics_analytics_metrics_created_byTousers                             analytics_metrics[]               @relation("analytics_metrics_created_byTousers")
  analytics_metrics_analytics_metrics_updated_byTousers                             analytics_metrics[]               @relation("analytics_metrics_updated_byTousers")
  appointment_recurrence_patterns_appointment_recurrence_patterns_created_byTousers appointment_recurrence_patterns[] @relation("appointment_recurrence_patterns_created_byTousers")
  appointment_recurrence_patterns_appointment_recurrence_patterns_updated_byTousers appointment_recurrence_patterns[] @relation("appointment_recurrence_patterns_updated_byTousers")
  appointment_staff                                                                 appointment_staff[]
  appointments_appointments_created_byTousers                                       appointments[]                    @relation("appointments_created_byTousers")
  appointments_appointments_therapist_idTousers                                     appointments[]                    @relation("appointments_therapist_idTousers")
  appointments_appointments_updated_byTousers                                       appointments[]                    @relation("appointments_updated_byTousers")
  auth_logs                                                                         auth_logs[]
  client_funding_client_funding_created_byTousers                                   client_funding[]                  @relation("client_funding_created_byTousers")
  client_funding_client_funding_updated_byTousers                                   client_funding[]                  @relation("client_funding_updated_byTousers")
  client_insurance_client_insurance_created_byTousers                               client_insurance[]                @relation("client_insurance_created_byTousers")
  client_insurance_client_insurance_updated_byTousers                               client_insurance[]                @relation("client_insurance_updated_byTousers")
  client_insurance_client_insurance_verified_byTousers                              client_insurance[]                @relation("client_insurance_verified_byTousers")
  clients_clients_created_byTousers                                                 clients[]                         @relation("clients_created_byTousers")
  clients_clients_therapist_idTousers                                               clients[]                         @relation("clients_therapist_idTousers")
  clients_clients_updated_byTousers                                                 clients[]                         @relation("clients_updated_byTousers")
  communication_access_logs                                                         communication_access_logs[]
  communication_attachments                                                         communication_attachments[]
  communications_communications_created_byTousers                                   communications[]                  @relation("communications_created_byTousers")
  communications_communications_updated_byTousers                                   communications[]                  @relation("communications_updated_byTousers")
  communications_communications_user_idTousers                                      communications[]                  @relation("communications_user_idTousers")
  communications_communications_read_byTousers                                      communications[]                  @relation("communications_read_byTousers")
  communications_communications_signed_byTousers                                    communications[]                  @relation("communications_signed_byTousers")
  content_translations_content_translations_created_byTousers                       content_translations[]            @relation("content_translations_created_byTousers")
  content_translations_content_translations_updated_byTousers                       content_translations[]            @relation("content_translations_updated_byTousers")
  dashboard_widgets                                                                 dashboard_widgets[]
  funding_authorizations_funding_authorizations_created_byTousers                   funding_authorizations[]          @relation("funding_authorizations_created_byTousers")
  funding_authorizations_funding_authorizations_updated_byTousers                   funding_authorizations[]          @relation("funding_authorizations_updated_byTousers")
  funding_programs_funding_programs_created_byTousers                               funding_programs[]                @relation("funding_programs_created_byTousers")
  funding_programs_funding_programs_updated_byTousers                               funding_programs[]                @relation("funding_programs_updated_byTousers")
  insurance_claims_insurance_claims_created_byTousers                               insurance_claims[]                @relation("insurance_claims_created_byTousers")
  insurance_claims_insurance_claims_updated_byTousers                               insurance_claims[]                @relation("insurance_claims_updated_byTousers")
  insurance_providers_insurance_providers_created_byTousers                         insurance_providers[]             @relation("insurance_providers_created_byTousers")
  insurance_providers_insurance_providers_updated_byTousers                         insurance_providers[]             @relation("insurance_providers_updated_byTousers")
  invoices_invoices_created_byTousers                                               invoices[]                        @relation("invoices_created_byTousers")
  invoices_invoices_updated_byTousers                                               invoices[]                        @relation("invoices_updated_byTousers")
  learners_learners_created_byTousers                                               learners[]                        @relation("learners_created_byTousers")
  learners_learners_instructor_idTousers                                            learners[]                        @relation("learners_instructor_idTousers")
  learners_learners_updated_byTousers                                               learners[]                        @relation("learners_updated_byTousers")
  messaging_threads                                                                 messaging_threads[]
  notification_preferences                                                          notification_preferences?
  payments                                                                          payments[]
  practice_locations_practice_locations_created_byTousers                           practice_locations[]              @relation("practice_locations_created_byTousers")
  practice_locations_practice_locations_updated_byTousers                           practice_locations[]              @relation("practice_locations_updated_byTousers")
  record_permissions_record_permissions_granted_byTousers                           record_permissions[]              @relation("record_permissions_granted_byTousers")
  record_permissions_record_permissions_user_idTousers                              record_permissions[]              @relation("record_permissions_user_idTousers")
  service_codes_service_codes_created_byTousers                                     service_codes[]                   @relation("service_codes_created_byTousers")
  service_codes_service_codes_updated_byTousers                                     service_codes[]                   @relation("service_codes_updated_byTousers")
  therapy_equipment_therapy_equipment_created_byTousers                             therapy_equipment[]               @relation("therapy_equipment_created_byTousers")
  therapy_equipment_therapy_equipment_updated_byTousers                             therapy_equipment[]               @relation("therapy_equipment_updated_byTousers")
  therapy_rooms_therapy_rooms_created_byTousers                                     therapy_rooms[]                   @relation("therapy_rooms_created_byTousers")
  therapy_rooms_therapy_rooms_updated_byTousers                                     therapy_rooms[]                   @relation("therapy_rooms_updated_byTousers")
  user_locations                                                                    user_locations[]
  user_permissions_user_permissions_granted_byTousers                               user_permissions[]                @relation("user_permissions_granted_byTousers")
  user_permissions_user_permissions_user_idTousers                                  user_permissions[]                @relation("user_permissions_user_idTousers")
  users_users_created_byTousers                                                     users?                            @relation("users_created_byTousers", fields: [created_by], references: [id])
  other_users_users_created_byTousers                                               users[]                           @relation("users_created_byTousers")
  users_users_updated_byTousers                                                     users?                            @relation("users_updated_byTousers", fields: [updated_by], references: [id])
  other_users_users_updated_byTousers                                               users[]                           @relation("users_updated_byTousers")
  waitlist_waitlist_created_byTousers                                               waitlist[]                        @relation("waitlist_created_byTousers")
  waitlist_waitlist_updated_byTousers                                               waitlist[]                        @relation("waitlist_updated_byTousers")
}

model waitlist {
  id                               BigInt          @id @default(autoincrement())
  service_type                     service_type
  status                           waitlist_status @default(WAITING)
  request_date                     DateTime
  preferred_schedule               String?
  notes                            String?
  client_id                        BigInt          @unique
  created_at                       DateTime        @default(now())
  updated_at                       DateTime
  created_by                       BigInt?
  updated_by                       BigInt?
  clients                          clients         @relation(fields: [client_id], references: [id])
  users_waitlist_created_byTousers users?          @relation("waitlist_created_byTousers", fields: [created_by], references: [id])
  users_waitlist_updated_byTousers users?          @relation("waitlist_updated_byTousers", fields: [updated_by], references: [id])
}

model analytics_metrics {
  id                                        BigInt              @id @default(autoincrement())
  metric_name                               String              @unique(map: "unique_metric_name")
  metric_category                           String
  description                               String?
  calculation_formula                       String?
  display_order                             Int                 @default(0)
  is_active                                 Boolean             @default(true)
  created_at                                DateTime            @default(now())
  updated_at                                DateTime            @default(now())
  created_by                                BigInt?
  updated_by                                BigInt?
  users_analytics_metrics_created_byTousers users?              @relation("analytics_metrics_created_byTousers", fields: [created_by], references: [id], onUpdate: NoAction, map: "fk_analytics_metrics_created_by")
  users_analytics_metrics_updated_byTousers users?              @relation("analytics_metrics_updated_byTousers", fields: [updated_by], references: [id], onUpdate: NoAction, map: "fk_analytics_metrics_updated_by")
  metrics_snapshots                         metrics_snapshots[]
}

model auth_logs {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt
  action     String
  ip_address String?
  user_agent String?
  success    Boolean  @default(true)
  timestamp  DateTime @default(now())
  details    String?
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_auth_logs_user")
}

model client_funding {
  id                                     BigInt                   @id @default(autoincrement())
  client_id                              BigInt
  funding_program_id                     BigInt
  reference_number                       String?
  status                                 String
  total_amount                           Decimal                  @db.Decimal(15, 2)
  remaining_amount                       Decimal                  @db.Decimal(15, 2)
  start_date                             DateTime                 @db.Date
  end_date                               DateTime                 @db.Date
  approval_date                          DateTime?                @db.Date
  approved_by                            String?
  notes                                  String?
  created_at                             DateTime                 @default(now())
  updated_at                             DateTime
  created_by                             BigInt?
  updated_by                             BigInt?
  clients                                clients                  @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_client_funding_client")
  users_client_funding_created_byTousers users?                   @relation("client_funding_created_byTousers", fields: [created_by], references: [id], onUpdate: NoAction, map: "fk_client_funding_created_by")
  funding_programs                       funding_programs         @relation(fields: [funding_program_id], references: [id], onUpdate: NoAction, map: "fk_client_funding_program")
  users_client_funding_updated_byTousers users?                   @relation("client_funding_updated_byTousers", fields: [updated_by], references: [id], onUpdate: NoAction, map: "fk_client_funding_updated_by")
  funding_authorizations                 funding_authorizations[]
  invoices                               invoices[]
}

model client_insurance {
  id                                        BigInt              @id @default(autoincrement())
  client_id                                 BigInt
  insurance_provider_id                     BigInt
  policy_number                             String
  group_number                              String?
  member_id                                 String
  policy_holder_name                        String
  policy_holder_dob                         DateTime?           @db.Date
  relationship_to_client                    String
  coverage_start_date                       DateTime?           @db.Date
  coverage_end_date                         DateTime?           @db.Date
  max_annual_coverage                       Decimal?            @db.Decimal(15, 2)
  remaining_coverage                        Decimal?            @db.Decimal(15, 2)
  coverage_details                          String?
  is_primary                                Boolean             @default(true)
  verification_date                         DateTime?           @db.Date
  verified_by                               BigInt?
  created_at                                DateTime            @default(now())
  updated_at                                DateTime
  created_by                                BigInt?
  updated_by                                BigInt?
  clients                                   clients             @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_client_insurance_client")
  users_client_insurance_created_byTousers  users?              @relation("client_insurance_created_byTousers", fields: [created_by], references: [id], onUpdate: NoAction, map: "fk_client_insurance_created_by")
  insurance_providers                       insurance_providers @relation(fields: [insurance_provider_id], references: [id], onUpdate: NoAction, map: "fk_client_insurance_provider")
  users_client_insurance_updated_byTousers  users?              @relation("client_insurance_updated_byTousers", fields: [updated_by], references: [id], onUpdate: NoAction, map: "fk_client_insurance_updated_by")
  users_client_insurance_verified_byTousers users?              @relation("client_insurance_verified_byTousers", fields: [verified_by], references: [id], onUpdate: NoAction, map: "fk_client_insurance_verified_by")
  insurance_claims                          insurance_claims[]
  invoices                                  invoices[]
}

model communication_access_logs {
  id                        BigInt                     @id @default(autoincrement())
  communication_id          BigInt?
  attachment_id             BigInt?
  user_id                   BigInt
  access_type               String
  access_timestamp          DateTime                   @default(now())
  ip_address                String?
  user_agent                String?
  success                   Boolean                    @default(true)
  communication_attachments communication_attachments? @relation(fields: [attachment_id], references: [id], onUpdate: NoAction, map: "fk_communication_access_logs_attachment")
  communications            communications?            @relation(fields: [communication_id], references: [id], onUpdate: NoAction, map: "fk_communication_access_logs_communication")
  users                     users                      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_communication_access_logs_user")
}

model communication_attachments {
  id                        BigInt                      @id @default(autoincrement())
  communication_id          BigInt
  file_name                 String
  file_type                 String
  file_size                 Int
  file_path                 String
  upload_date               DateTime                    @default(now())
  security_classification   security_classification     @default(PERSONAL)
  encryption_status         encryption_status           @default(ENCRYPTED_AT_REST)
  checksum                  String?
  created_at                DateTime                    @default(now())
  created_by                BigInt?
  communication_access_logs communication_access_logs[]
  communications            communications              @relation(fields: [communication_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_communication_attachments_communication")
  users                     users?                      @relation(fields: [created_by], references: [id], onUpdate: NoAction, map: "fk_communication_attachments_user")
}

model content_translations {
  id                                           BigInt        @id @default(autoincrement())
  content_type                                 String
  content_id                                   String
  language                                     language_code
  translated_content                           String
  created_at                                   DateTime      @default(now())
  updated_at                                   DateTime
  created_by                                   BigInt?
  updated_by                                   BigInt?
  users_content_translations_created_byTousers users?        @relation("content_translations_created_byTousers", fields: [created_by], references: [id], onUpdate: NoAction, map: "fk_content_translations_created_by")
  users_content_translations_updated_byTousers users?        @relation("content_translations_updated_byTousers", fields: [updated_by], references: [id], onUpdate: NoAction, map: "fk_content_translations_updated_by")

  @@unique([content_type, content_id, language], map: "unique_content_translation")
}

model dashboard_widgets {
  id           BigInt   @id @default(autoincrement())
  user_id      BigInt
  widget_type  String
  title        String
  metric_ids   String?
  chart_type   String?
  time_range   String?
  custom_query String?
  position_x   Int      @default(0)
  position_y   Int      @default(0)
  width        Int      @default(1)
  height       Int      @default(1)
  is_active    Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime
  users        users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_dashboard_widgets_user")
}

model funding_authorizations {
  id                                             BigInt         @id @default(autoincrement())
  client_funding_id                              BigInt
  invoice_id                                     BigInt
  authorization_number                           String?
  authorized_date                                DateTime       @db.Date
  authorized_amount                              Decimal        @db.Decimal(15, 2)
  status                                         String
  notes                                          String?
  created_at                                     DateTime       @default(now())
  updated_at                                     DateTime
  created_by                                     BigInt?
  updated_by                                     BigInt?
  client_funding                                 client_funding @relation(fields: [client_funding_id], references: [id], onUpdate: NoAction, map: "fk_funding_authorizations_client_funding")
  users_funding_authorizations_created_byTousers users?         @relation("funding_authorizations_created_byTousers", fields: [created_by], references: [id], onUpdate: NoAction, map: "fk_funding_authorizations_created_by")
  invoices                                       invoices       @relation(fields: [invoice_id], references: [id], onUpdate: NoAction, map: "fk_funding_authorizations_invoice")
  users_funding_authorizations_updated_byTousers users?         @relation("funding_authorizations_updated_byTousers", fields: [updated_by], references: [id], onUpdate: NoAction, map: "fk_funding_authorizations_updated_by")
}

model funding_programs {
  id                                       BigInt           @id @default(autoincrement())
  name                                     String
  program_type                             String
  description                              String?
  max_amount                               Decimal?         @db.Decimal(15, 2)
  coverage_period                          String?
  age_restrictions                         String?
  documentation_required                   String?
  renewal_process                          String?
  website                                  String?
  contact_information                      String?
  application_process                      String?
  is_active                                Boolean          @default(true)
  province                                 String?
  created_at                               DateTime         @default(now())
  updated_at                               DateTime
  created_by                               BigInt?
  updated_by                               BigInt?
  client_funding                           client_funding[]
  users_funding_programs_created_byTousers users?           @relation("funding_programs_created_byTousers", fields: [created_by], references: [id], onUpdate: NoAction, map: "fk_funding_programs_created_by")
  users_funding_programs_updated_byTousers users?           @relation("funding_programs_updated_byTousers", fields: [updated_by], references: [id], onUpdate: NoAction, map: "fk_funding_programs_updated_by")
}

model insurance_claims {
  id                                       BigInt           @id @default(autoincrement())
  invoice_id                               BigInt
  insurance_id                             BigInt
  claim_number                             String?
  submission_date                          DateTime         @db.Date
  status                                   claim_status     @default(PENDING)
  amount_claimed                           Decimal          @db.Decimal(15, 2)
  amount_approved                          Decimal?         @db.Decimal(15, 2)
  amount_paid                              Decimal?         @db.Decimal(15, 2)
  payment_date                             DateTime?        @db.Date
  denial_reason                            String?
  notes                                    String?
  follow_up_date                           DateTime?        @db.Date
  created_at                               DateTime         @default(now())
  updated_at                               DateTime
  created_by                               BigInt?
  updated_by                               BigInt?
  users_insurance_claims_created_byTousers users?           @relation("insurance_claims_created_byTousers", fields: [created_by], references: [id], onUpdate: NoAction, map: "fk_insurance_claims_created_by")
  client_insurance                         client_insurance @relation(fields: [insurance_id], references: [id], onUpdate: NoAction, map: "fk_insurance_claims_insurance")
  invoices                                 invoices         @relation(fields: [invoice_id], references: [id], onUpdate: NoAction, map: "fk_insurance_claims_invoice")
  users_insurance_claims_updated_byTousers users?           @relation("insurance_claims_updated_byTousers", fields: [updated_by], references: [id], onUpdate: NoAction, map: "fk_insurance_claims_updated_by")
}

model insurance_providers {
  id                                          BigInt             @id @default(autoincrement())
  name                                        String
  contact_person                              String?
  phone                                       String?
  email                                       String?
  website                                     String?
  address                                     String?
  city                                        String?
  province                                    String?
  postal_code                                 String?
  submission_portal                           String?
  submission_format                           String?
  electronic_filing                           Boolean            @default(false)
  notes                                       String?
  is_active                                   Boolean            @default(true)
  created_at                                  DateTime           @default(now())
  updated_at                                  DateTime
  created_by                                  BigInt?
  updated_by                                  BigInt?
  client_insurance                            client_insurance[]
  users_insurance_providers_created_byTousers users?             @relation("insurance_providers_created_byTousers", fields: [created_by], references: [id], onUpdate: NoAction, map: "fk_insurance_providers_created_by")
  users_insurance_providers_updated_byTousers users?             @relation("insurance_providers_updated_byTousers", fields: [updated_by], references: [id], onUpdate: NoAction, map: "fk_insurance_providers_updated_by")
}

model invoice_line_items {
  id              BigInt        @id @default(autoincrement())
  invoice_id      BigInt
  service_code_id BigInt
  description     String
  service_date    DateTime      @db.Date
  quantity        Decimal       @db.Decimal(10, 2)
  unit_price      Decimal       @db.Decimal(15, 2)
  tax_rate        Decimal       @default(0) @db.Decimal(5, 2)
  tax_amount      Decimal       @default(0) @db.Decimal(15, 2)
  discount_amount Decimal       @default(0) @db.Decimal(15, 2)
  line_total      Decimal       @db.Decimal(15, 2)
  appointment_id  BigInt?
  learner_id      BigInt?
  appointments    appointments? @relation(fields: [appointment_id], references: [id], onUpdate: NoAction, map: "fk_invoice_line_items_appointment")
  invoices        invoices      @relation(fields: [invoice_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_invoice_line_items_invoice")
  learners        learners?     @relation(fields: [learner_id], references: [id], onUpdate: NoAction, map: "fk_invoice_line_items_learner")
  service_codes   service_codes @relation(fields: [service_code_id], references: [id], onUpdate: NoAction, map: "fk_invoice_line_items_service_code")
}

model invoices {
  id                               BigInt                   @id @default(autoincrement())
  invoice_number                   String                   @unique
  client_id                        BigInt
  funding_source                   funding_source
  insurance_id                     BigInt?
  funding_id                       BigInt?
  status                           invoice_status           @default(DRAFT)
  issue_date                       DateTime                 @db.Date
  due_date                         DateTime                 @db.Date
  subtotal                         Decimal                  @db.Decimal(15, 2)
  tax_amount                       Decimal                  @default(0) @db.Decimal(15, 2)
  discount_amount                  Decimal                  @default(0) @db.Decimal(15, 2)
  total_amount                     Decimal                  @db.Decimal(15, 2)
  amount_paid                      Decimal                  @default(0) @db.Decimal(15, 2)
  balance                          Decimal                  @db.Decimal(15, 2)
  notes                            String?
  payment_instructions             String?
  terms_conditions                 String?
  created_at                       DateTime                 @default(now())
  updated_at                       DateTime
  created_by                       BigInt?
  updated_by                       BigInt?
  funding_authorizations           funding_authorizations[]
  insurance_claims                 insurance_claims[]
  invoice_line_items               invoice_line_items[]
  clients                          clients                  @relation(fields: [client_id], references: [id], onUpdate: NoAction, map: "fk_invoices_client")
  users_invoices_created_byTousers users?                   @relation("invoices_created_byTousers", fields: [created_by], references: [id], onUpdate: NoAction, map: "fk_invoices_created_by")
  client_funding                   client_funding?          @relation(fields: [funding_id], references: [id], onUpdate: NoAction, map: "fk_invoices_funding")
  client_insurance                 client_insurance?        @relation(fields: [insurance_id], references: [id], onUpdate: NoAction, map: "fk_invoices_insurance")
  users_invoices_updated_byTousers users?                   @relation("invoices_updated_byTousers", fields: [updated_by], references: [id], onUpdate: NoAction, map: "fk_invoices_updated_by")
  payments                         payments[]
}

model messaging_threads {
  id              BigInt           @id @default(autoincrement())
  subject         String
  client_id       BigInt
  is_active       Boolean          @default(true)
  created_at      DateTime         @default(now())
  updated_at      DateTime
  created_by      BigInt?
  last_message_at DateTime?
  communications  communications[]
  clients         clients          @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_messaging_threads_client")
  users           users?           @relation(fields: [created_by], references: [id], onUpdate: NoAction, map: "fk_messaging_threads_created_by")
}

model metrics_snapshots {
  id                BigInt            @id @default(autoincrement())
  metric_id         BigInt
  snapshot_date     DateTime          @db.Date
  value             Decimal           @db.Decimal(15, 2)
  comparison_value  Decimal?          @db.Decimal(15, 2)
  comparison_period String?
  notes             String?
  created_at        DateTime          @default(now())
  analytics_metrics analytics_metrics @relation(fields: [metric_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_metrics_snapshots_metric")

  @@unique([metric_id, snapshot_date], map: "unique_metric_snapshot")
}

model payments {
  id               BigInt         @id @default(autoincrement())
  invoice_id       BigInt
  payment_date     DateTime       @db.Date
  amount           Decimal        @db.Decimal(15, 2)
  payment_method   payment_method
  reference_number String?
  notes            String?
  received_by      BigInt?
  created_at       DateTime       @default(now())
  updated_at       DateTime
  invoices         invoices       @relation(fields: [invoice_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_payments_invoice")
  users            users?         @relation(fields: [received_by], references: [id], onUpdate: NoAction, map: "fk_payments_received_by")
}

model permission_types {
  id                 BigInt               @id @default(autoincrement())
  name               String               @unique
  description        String?
  category           String?
  created_at         DateTime             @default(now())
  record_permissions record_permissions[]
  role_permissions   role_permissions[]
  user_permissions   user_permissions[]
}

model practice_locations {
  id                                         BigInt           @id @default(autoincrement())
  practice_id                                BigInt
  name                                       String
  address                                    String
  city                                       String
  province                                   String
  postal_code                                String
  phone                                      String?
  email                                      String?
  is_main_location                           Boolean          @default(false)
  is_active                                  Boolean          @default(true)
  hours_of_operation                         String?
  directions                                 String?
  latitude                                   Decimal?         @db.Decimal(10, 8)
  longitude                                  Decimal?         @db.Decimal(11, 8)
  created_at                                 DateTime         @default(now())
  updated_at                                 DateTime
  created_by                                 BigInt?
  updated_by                                 BigInt?
  appointments                               appointments[]
  users_practice_locations_created_byTousers users?           @relation("practice_locations_created_byTousers", fields: [created_by], references: [id], onUpdate: NoAction, map: "fk_practice_locations_created_by")
  practice                                   practice         @relation(fields: [practice_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_practice_locations_practice")
  users_practice_locations_updated_byTousers users?           @relation("practice_locations_updated_byTousers", fields: [updated_by], references: [id], onUpdate: NoAction, map: "fk_practice_locations_updated_by")
  therapy_rooms                              therapy_rooms[]
  user_locations                             user_locations[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model record_permissions {
  id                                         BigInt           @id @default(autoincrement())
  user_id                                    BigInt
  permission_id                              BigInt
  client_id                                  BigInt?
  learner_id                                 BigInt?
  granted                                    Boolean          @default(true)
  granted_by                                 BigInt?
  granted_at                                 DateTime         @default(now())
  expires_at                                 DateTime?
  clients                                    clients?         @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_record_permissions_client")
  users_record_permissions_granted_byTousers users?           @relation("record_permissions_granted_byTousers", fields: [granted_by], references: [id], onUpdate: NoAction, map: "fk_record_permissions_granted_by")
  learners                                   learners?        @relation(fields: [learner_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_record_permissions_learner")
  permission_types                           permission_types @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_record_permissions_permission")
  users_record_permissions_user_idTousers    users            @relation("record_permissions_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_record_permissions_user")
}

model role_permissions {
  id               BigInt           @id @default(autoincrement())
  role             user_role
  permission_id    BigInt
  created_at       DateTime         @default(now())
  permission_types permission_types @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_role_permissions_permission")

  @@unique([role, permission_id], map: "unique_role_permission")
}

model service_codes {
  id                                    BigInt               @id @default(autoincrement())
  code                                  String               @unique(map: "unique_service_code")
  description                           String
  rate                                  Decimal              @db.Decimal(15, 2)
  tax_rate                              Decimal              @default(0) @db.Decimal(5, 2)
  billable_unit                         String
  minimum_duration                      Int?
  notes                                 String?
  is_active                             Boolean              @default(true)
  created_at                            DateTime             @default(now())
  updated_at                            DateTime
  created_by                            BigInt?
  updated_by                            BigInt?
  invoice_line_items                    invoice_line_items[]
  users_service_codes_created_byTousers users?               @relation("service_codes_created_byTousers", fields: [created_by], references: [id], onUpdate: NoAction, map: "fk_service_codes_created_by")
  users_service_codes_updated_byTousers users?               @relation("service_codes_updated_byTousers", fields: [updated_by], references: [id], onUpdate: NoAction, map: "fk_service_codes_updated_by")
}

model user_locations {
  user_id            BigInt
  location_id        BigInt
  is_primary         Boolean            @default(false)
  created_at         DateTime           @default(now())
  practice_locations practice_locations @relation(fields: [location_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_locations_location")
  users              users              @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_locations_user")

  @@id([user_id, location_id])
}

model user_permissions {
  id                                       BigInt           @id @default(autoincrement())
  user_id                                  BigInt
  permission_id                            BigInt
  granted                                  Boolean          @default(true)
  granted_by                               BigInt?
  granted_at                               DateTime         @default(now())
  expires_at                               DateTime?
  users_user_permissions_granted_byTousers users?           @relation("user_permissions_granted_byTousers", fields: [granted_by], references: [id], onUpdate: NoAction, map: "fk_user_permissions_granted_by")
  permission_types                         permission_types @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_permissions_permission")
  users_user_permissions_user_idTousers    users            @relation("user_permissions_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_permissions_user")

  @@unique([user_id, permission_id], map: "unique_user_permission")
}

enum appointment_status {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  NOSHOW
}

enum client_status {
  ACTIVE
  INACTIVE
  ARCHIVED
  WAITLIST
}

enum communication_type {
  EMAIL
  PHONE
  INPERSON
  VIDEO
  SMS
}

enum learner_status {
  ACTIVE
  INACTIVE
  ONHOLD
  COMPLETED
}

enum priority {
  HIGH
  MEDIUM
  LOW
}

enum recurrence_frequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  CUSTOM
}

enum service_type {
  THERAPY
  ASSESSMENT
  CONSULTATION
}

enum therapist_role {
  PRIMARY
  ASSISTANT
  SUPERVISOR
  OBSERVER
}

enum user_role {
  ADMIN
  THERAPIST
  STAFF
  CAREGIVER
  PARENT
  SUPERVISOR
  BILLING_STAFF
}

enum waitlist_status {
  WAITING
  PLACED
  CANCELLED
}

enum claim_status {
  PENDING
  SUBMITTED
  IN_REVIEW
  APPROVED
  PARTIAL_APPROVAL
  DENIED
  RESUBMITTED
  PAID
  APPEALED
}

enum encryption_status {
  UNENCRYPTED
  ENCRYPTED_AT_REST
  ENCRYPTED_IN_TRANSIT
  FULLY_ENCRYPTED
}

enum funding_source {
  PRIVATE_PAY
  INSURANCE
  PROVINCIAL_FUNDING
  FEDERAL_GRANT
  CHARITABLE_GRANT
  SCHOOL_DISTRICT
  OTHER
}

enum invoice_status {
  DRAFT
  PENDING
  SENT
  PAID
  PARTIAL
  OVERDUE
  CANCELLED
  REFUNDED
}

enum language_code {
  EN
  FR
  ES
  ZH
  AR
  UR
  PA
  HI
  DE
  PT
  IT
  RU
}

enum payment_method {
  CREDIT_CARD
  DEBIT
  E_TRANSFER
  CASH
  CHEQUE
  DIRECT_DEPOSIT
  INSURANCE_DIRECT
  FUNDING_PROGRAM
}

enum relationship_type {
  PARENT
  GUARDIAN
  GRANDPARENT
  SIBLING
  OTHER_FAMILY
  CAREGIVER
  CASE_WORKER
}

enum security_classification {
  PUBLIC
  PERSONAL
  CONFIDENTIAL
  RESTRICTED
}
