generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                BigInt      @id @default(autoincrement())
  email             String      @unique
  emailVerified     Boolean     @default(false) @map("email_verified")
  hashedPassword    String?     @map("hashed_password")
  role              UserRole    @default(THERAPIST)
  firstName         String      @map("first_name")
  lastName          String      @map("last_name")
  phone             String?
  avatar            String?
  bio               String?
  specialties       String?
  qualifications    String?
  isActive          Boolean     @default(true) @map("is_active")
  lastLogin         DateTime?   @map("last_login")

  // Appointments relations
  therapistAppointments Appointment[]
  createdAppointments  Appointment[] @relation("CreatedAppointments")
  updatedAppointments  Appointment[] @relation("UpdatedAppointments")
  appointmentStaff     AppointmentStaff[]
  
  // Therapy resources relations
  createdRooms        TherapyRoom[] @relation("CreatedRooms")
  updatedRooms        TherapyRoom[] @relation("UpdatedRooms")
  createdEquipment    TherapyEquipment[] @relation("CreatedEquipment")
  updatedEquipment    TherapyEquipment[] @relation("UpdatedEquipment")
  
  // Client relations
  createdClients      Client[]     @relation("CreatedClients")
  updatedClients      Client[]     @relation("UpdatedClients")
  
  // Learner relations
  createdLearners     Learner[]    @relation("CreatedLearners")
  updatedLearners     Learner[]    @relation("UpdatedLearners")
  
  // Communication relations
  createdCommunications Communication[] @relation("CommunicationCreatedBy")
  updatedCommunications Communication[] @relation("CommunicationUpdatedBy")
  sentCommunications    Communication[] @relation("UserToCommunication")

  createdCaregivers     Caregiver[]     @relation("CaregiverCreatedBy")
  updatedCaregivers     Caregiver[]     @relation("CaregiverUpdatedBy")
  createdAssessments    Assessment[]    @relation("AssessmentCreatedBy")
  updatedAssessments    Assessment[]    @relation("AssessmentUpdatedBy")
  createdTreatmentPlans TreatmentPlan[] @relation("TreatmentPlanCreatedBy")
  updatedTreatmentPlans TreatmentPlan[] @relation("TreatmentPlanUpdatedBy")

  createdAt          DateTime    @default(now()) @map("created_at")
  updatedAt          DateTime    @updatedAt @map("updated_at")
  createdBy          BigInt?     @map("created_by")
  updatedBy          BigInt?     @map("updated_by")
  createdByUser      User?       @relation("CreatedUsers", fields: [createdBy], references: [id])
  updatedByUser      User?       @relation("UpdatedUsers", fields: [updatedBy], references: [id])
  createdUsers       User[]      @relation("CreatedUsers")
  updatedUsers       User[]      @relation("UpdatedUsers")

  @@map("users")
}

model Client {
  id             BigInt          @id @default(autoincrement())
  firstName      String          @map("first_name")
  lastName       String          @map("last_name")
  email          String?         @unique
  phone          String
  address        String?
  city           String?
  state          String?
  zipCode        String?         @map("zip_code")
  dateOfBirth    DateTime?       @map("date_of_birth")
  insuranceProvider String?      @map("insurance_provider")
  insurancePolicyNumber String?  @map("insurance_policy_number")
  emergencyContactName String?   @map("emergency_contact_name")
  emergencyContactPhone String?  @map("emergency_contact_phone")
  emergencyContactRelationship String? @map("emergency_contact_relationship")
  diagnosis     String?
  diagnosisDate DateTime?       @map("diagnosis_date")
  status         ClientStatus    @default(ACTIVE)
  priority       Priority        @default(MEDIUM)
  notes          String?
  therapistId    BigInt?         @map("therapist_id")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  createdBy      BigInt?         @map("created_by")
  updatedBy      BigInt?         @map("updated_by")
  appointments   Appointment[]
  createdByUser  User?           @relation("ClientCreatedBy", fields: [createdBy], references: [id])
  therapist      User?           @relation("TherapistToClient", fields: [therapistId], references: [id])
  updatedByUser  User?           @relation("ClientUpdatedBy", fields: [updatedBy], references: [id])
  communications Communication[] @relation("ClientToCommunication")
  learners       Learner[]
  waitlist       Waitlist?
  caregivers     Caregiver[]
  assessments    Assessment[]
  treatmentPlans TreatmentPlan[]

  @@map("clients")
}

model Learner {
  id                 BigInt          @id @default(autoincrement())
  firstName          String          @map("first_name")
  lastName           String          @map("last_name")
  dateOfBirth        DateTime?       @map("date_of_birth")
  gender             String?
  course             String?
  schedule           String?
  status             LearnerStatus   @default(ACTIVE)
  diagnosis          String?
  diagnosisDate      DateTime?       @map("diagnosis_date")
  notes              String?
  clientId           BigInt          @map("client_id")
  instructorId       BigInt?         @map("instructor_id")
  createdAt          DateTime        @default(now()) @map("created_at")
  updatedAt          DateTime        @updatedAt @map("updated_at")
  createdBy          BigInt?         @map("created_by")
  updatedBy          BigInt?         @map("updated_by")
  appointments       Appointment[]
  groupSessions      AppointmentGroupParticipant[]
  communications     Communication[] @relation("LearnerToCommunication")
  client             Client          @relation(fields: [clientId], references: [id])
  createdByUser      User?           @relation("LearnerCreatedBy", fields: [createdBy], references: [id])
  instructor         User?           @relation("InstructorToLearner", fields: [instructorId], references: [id])
  updatedByUser      User?           @relation("LearnerUpdatedBy", fields: [updatedBy], references: [id])
  assessments        Assessment[]
  treatmentPlans     TreatmentPlan[]

  @@map("learners")
}

model Appointment {
  id                BigInt            @id @default(autoincrement())
  title             String?
  startTime         DateTime          @map("start_time")
  endTime           DateTime          @map("end_time")
  status            AppointmentStatus @default(SCHEDULED)
  notes             String?
  location          String?
  cancellationReason String?
  isRecurring       Boolean           @default(false) @map("is_recurring")
  isGroupSession    Boolean           @default(false) @map("is_group_session")
  maxParticipants   Int?              @map("max_participants")

  // Relations
  clientId          BigInt?           @map("client_id")
  client            Client?           @relation(fields: [clientId], references: [id])
  learnerId         BigInt?           @map("learner_id")
  learner           Learner?          @relation(fields: [learnerId], references: [id])
  therapistId       BigInt            @map("therapist_id")
  therapist         User              @relation(fields: [therapistId], references: [id])
  roomId            BigInt?           @map("room_id")
  room              TherapyRoom?      @relation(fields: [roomId], references: [id])
  recurrencePatternId BigInt?         @map("recurrence_pattern_id")
  recurrencePattern RecurrencePattern? @relation(fields: [recurrencePatternId], references: [id])
  parentAppointmentId BigInt?         @map("parent_appointment_id")
  parentAppointment Appointment?      @relation("RecurringAppointments", fields: [parentAppointmentId], references: [id])
  childAppointments Appointment[]     @relation("RecurringAppointments")

  // Many-to-many relations
  staffAssignments  AppointmentStaff[]
  equipmentAssignments AppointmentEquipment[]
  groupParticipants AppointmentGroupParticipant[]

  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  createdBy         BigInt?           @map("created_by")
  updatedBy         BigInt?           @map("updated_by")
  createdByUser     User?             @relation("CreatedAppointments", fields: [createdBy], references: [id])
  updatedByUser     User?             @relation("UpdatedAppointments", fields: [updatedBy], references: [id])

  @@map("appointments")
}

model TherapyRoom {
  id            BigInt      @id @default(autoincrement())
  name          String
  capacity      Int?
  description   String?
  equipment     String?
  isActive      Boolean     @default(true) @map("is_active")
  appointments  Appointment[]
  
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  createdBy     BigInt?     @map("created_by")
  updatedBy     BigInt?     @map("updated_by")
  createdByUser User?       @relation("CreatedRooms", fields: [createdBy], references: [id])
  updatedByUser User?       @relation("UpdatedRooms", fields: [updatedBy], references: [id])
  
  @@map("therapy_rooms")
}

model TherapyEquipment {
  id            BigInt      @id @default(autoincrement())
  name          String
  description   String?
  quantity      Int         @default(1)
  isAvailable   Boolean     @default(true) @map("is_available")
  notes         String?
  appointmentEquipment AppointmentEquipment[]
  
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  createdBy     BigInt?     @map("created_by")
  updatedBy     BigInt?     @map("updated_by")
  createdByUser User?       @relation("CreatedEquipment", fields: [createdBy], references: [id])
  updatedByUser User?       @relation("UpdatedEquipment", fields: [updatedBy], references: [id])
  
  @@map("therapy_equipment")
}

model RecurrencePattern {
  id              BigInt      @id @default(autoincrement())
  frequency       RecurrenceFrequency
  interval        Int         @default(1)
  daysOfWeek      String?     @map("days_of_week") // JSON array of days
  startDate       DateTime    @map("start_date")
  endDate         DateTime?   @map("end_date")
  occurrenceCount Int?        @map("occurrence_count")
  appointments    Appointment[]
  
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  createdBy       BigInt?     @map("created_by")
  updatedBy       BigInt?     @map("updated_by")
  
  @@map("appointment_recurrence_patterns")
}

model AppointmentStaff {
  appointmentId BigInt     @map("appointment_id")
  userId        BigInt     @map("user_id")
  role          TherapistRole
  createdAt     DateTime   @default(now()) @map("created_at")
  
  appointment    Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@id([appointmentId, userId])
  @@map("appointment_staff")
}

model AppointmentEquipment {
  appointmentId BigInt     @map("appointment_id")
  equipmentId   BigInt     @map("equipment_id")
  quantity      Int        @default(1)
  notes         String?
  createdAt     DateTime   @default(now()) @map("created_at")
  
  appointment    Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  equipment      TherapyEquipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  
  @@id([appointmentId, equipmentId])
  @@map("appointment_equipment")
}

model AppointmentGroupParticipant {
  appointmentId BigInt     @map("appointment_id")
  learnerId     BigInt     @map("learner_id")
  notes         String?
  createdAt     DateTime   @default(now()) @map("created_at")
  
  appointment    Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  learner        Learner     @relation(fields: [learnerId], references: [id], onDelete: Cascade)
  
  @@id([appointmentId, learnerId])
  @@map("appointment_group_participants")
}

model Communication {
  id            BigInt            @id @default(autoincrement())
  type          CommunicationType
  subject       String
  content       String
  sentAt        DateTime          @default(now()) @map("sent_at")
  notes         String?
  clientId      BigInt            @map("client_id")
  learnerId     BigInt?           @map("learner_id")
  appointmentId BigInt?           @map("appointment_id")
  userId        BigInt?           @map("user_id")
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime?         @updatedAt @map("updated_at")
  createdBy     BigInt?           @map("created_by")
  updatedBy     BigInt?           @map("updated_by")
  appointment   Appointment?      @relation("AppointmentToCommunication", fields: [appointmentId], references: [id])
  client        Client            @relation("ClientToCommunication", fields: [clientId], references: [id])
  createdByUser User?             @relation("CommunicationCreatedBy", fields: [createdBy], references: [id])
  learner       Learner?          @relation("LearnerToCommunication", fields: [learnerId], references: [id])
  updatedByUser User?             @relation("CommunicationUpdatedBy", fields: [updatedBy], references: [id])
  user          User?             @relation("UserToCommunication", fields: [userId], references: [id])

  @@map("communications")
}

model Waitlist {
  id                BigInt         @id @default(autoincrement())
  serviceType       ServiceType    @map("service_type")
  status            WaitlistStatus @default(WAITING)
  requestDate       DateTime       @map("request_date")
  preferredSchedule String?        @map("preferred_schedule")
  notes             String?
  clientId          BigInt         @unique @map("client_id")
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  createdBy         BigInt?        @map("created_by")
  updatedBy         BigInt?        @map("updated_by")
  client            Client         @relation(fields: [clientId], references: [id])
  createdByUser     User?          @relation("WaitlistCreatedBy", fields: [createdBy], references: [id])
  updatedByUser     User?          @relation("WaitlistUpdatedBy", fields: [updatedBy], references: [id])

  @@map("waitlist")
}

model Practice {
  id               BigInt   @id @default(autoincrement())
  name             String
  address          String?
  city             String?
  state            String?
  zipCode          String?  @map("zip_code")
  phone            String?
  email            String?
  website          String?
  hoursOfOperation String?  @map("hours_of_operation")
  billingName      String?  @map("billing_name") // Name on card/account
  billingEmail     String?  @map("billing_email") // Email for billing notifications
  billingAddress   String?  @map("billing_address")
  billingCity      String?  @map("billing_city")
  billingState     String?  @map("billing_state")
  billingZipCode   String?  @map("billing_zip_code")
  stripeCustomerId     String?  @unique @map("stripe_customer_id")
  stripeSubscriptionId String?  @unique @map("stripe_subscription_id")
  subscriptionStatus String?  @default("inactive") @map("subscription_status") // e.g., active, inactive, trialing, past_due
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@map("practice")
}

model NotificationPreference {
  id                 BigInt    @id @default(autoincrement())
  userId             BigInt    @unique @map("user_id") // Foreign key linking to User
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation field
  emailNotifications Boolean   @default(true) @map("email_notifications")
  smsNotifications   Boolean   @default(false) @map("sms_notifications")
  pushNotifications  Boolean   @default(false) @map("push_notifications")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  @@map("notification_preferences")
}



model Caregiver {
  id                BigInt    @id @default(autoincrement())
  firstName         String    @map("first_name")
  lastName          String    @map("last_name")
  relationship      RelationshipType
  isPrimary         Boolean   @default(false) @map("is_primary")
  phone             String?
  email             String?
  address           String?
  city              String?
  state             String?
  zipCode           String?   @map("zip_code")
  hasLegalCustody   Boolean?  @default(false) @map("has_legal_custody")
  isEmergencyContact Boolean?  @default(false) @map("is_emergency_contact")
  notes             String?
  clientId          BigInt    @map("client_id")
  client            Client    @relation(fields: [clientId], references: [id])
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  createdBy         BigInt?   @map("created_by")
  updatedBy         BigInt?   @map("updated_by")
  createdByUser     User?     @relation("CaregiverCreatedBy", fields: [createdBy], references: [id])
  updatedByUser     User?     @relation("CaregiverUpdatedBy", fields: [updatedBy], references: [id])

  @@map("caregivers")
}

model Assessment {
  id                BigInt    @id @default(autoincrement())
  assessmentType    AssessmentType
  assessmentDate    DateTime  @map("assessment_date")
  evaluator         String?
  scores            Json?
  summary           String?
  recommendations   String?
  notes             String?
  clientId          BigInt    @map("client_id")
  client            Client    @relation(fields: [clientId], references: [id])
  learnerId         BigInt?   @map("learner_id")
  learner           Learner?  @relation(fields: [learnerId], references: [id])
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  createdBy         BigInt?   @map("created_by")
  updatedBy         BigInt?   @map("updated_by")
  createdByUser     User?     @relation("AssessmentCreatedBy", fields: [createdBy], references: [id])
  updatedByUser     User?     @relation("AssessmentUpdatedBy", fields: [updatedBy], references: [id])

  @@map("assessments")
}

model TreatmentPlan {
  id                BigInt        @id @default(autoincrement())
  planName         String        @map("plan_name")
  planStartDate    DateTime      @map("plan_start_date")
  planEndDate      DateTime?     @map("plan_end_date")
  planStatus       PlanStatus    @default(DRAFT)
  clientId         BigInt        @map("client_id")
  client           Client        @relation(fields: [clientId], references: [id])
  learnerId        BigInt?       @map("learner_id")
  learner          Learner?     @relation(fields: [learnerId], references: [id])
  supervisingTherapistId BigInt  @map("supervising_therapist_id")
  supervisingTherapist User       @relation("TherapistToTreatmentPlan", fields: [supervisingTherapistId], references: [id])
  goals            Goal[]
  progressNotes    ProgressNote[]
  reviewDate       DateTime?     @map("review_date")
  reviewedById     BigInt?       @map("reviewed_by_id")
  reviewedBy       User?         @relation("ReviewerToTreatmentPlan", fields: [reviewedById], references: [id])
  recommendations  String?
  approvalStatus   ApprovalStatus? @default(PENDING)
  notes            String?
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")
  createdBy        BigInt?       @map("created_by")
  updatedBy        BigInt?       @map("updated_by")
  createdByUser    User?         @relation("TreatmentPlanCreatedBy", fields: [createdBy], references: [id])
  updatedByUser    User?         @relation("TreatmentPlanUpdatedBy", fields: [updatedBy], references: [id])

  @@map("treatment_plans")
}

model Goal {
  id                BigInt        @id @default(autoincrement())
  goalDescription   String        @map("goal_description")
  baselineMeasurement String?     @map("baseline_measurement")
  targetMeasurement String?       @map("target_measurement")
  measurementMethod String?       @map("measurement_method")
  goalPriority      Priority      @default(MEDIUM)
  goalStatus        GoalStatus    @default(IN_PROGRESS)
  startDate         DateTime?     @map("start_date")
  targetDate        DateTime?     @map("target_date")
  completionDate    DateTime?     @map("completion_date")
  notes             String?
  treatmentPlanId   BigInt        @map("treatment_plan_id")
  treatmentPlan     TreatmentPlan @relation(fields: [treatmentPlanId], references: [id])
  interventions     Intervention[]
  progressNoteReferences ProgressNoteGoalReference[]
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  createdBy         BigInt?       @map("created_by")
  updatedBy         BigInt?       @map("updated_by")
  createdByUser     User?         @relation("GoalCreatedBy", fields: [createdBy], references: [id])
  updatedByUser     User?         @relation("GoalUpdatedBy", fields: [updatedBy], references: [id])

  @@map("goals")
}

model Intervention {
  id                  BigInt    @id @default(autoincrement())
  interventionDescription String  @map("intervention_description")
  interventionSchedule String?   @map("intervention_schedule")
  materialsRequired   String?   @map("materials_required")
  notes               String?
  goalId              BigInt    @map("goal_id")
  goal                Goal      @relation(fields: [goalId], references: [id])
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")
  createdBy           BigInt?   @map("created_by")
  updatedBy           BigInt?   @map("updated_by")
  createdByUser       User?     @relation("InterventionCreatedBy", fields: [createdBy], references: [id])
  updatedByUser       User?     @relation("InterventionUpdatedBy", fields: [updatedBy], references: [id])

  @@map("interventions")
}

model ProgressNote {
  id                 BigInt      @id @default(autoincrement())
  sessionDate        DateTime    @map("session_date")
  sessionDuration    Int?        @map("session_duration") // Duration in minutes
  therapistId        BigInt      @map("therapist_id")
  therapist          User        @relation("TherapistToProgressNote", fields: [therapistId], references: [id])
  treatmentPlanId    BigInt      @map("treatment_plan_id")
  treatmentPlan      TreatmentPlan @relation(fields: [treatmentPlanId], references: [id])
  sessionDetails     String?
  quantitativeData   Json?       @map("quantitative_data")
  qualitativeObservations String? @map("qualitative_observations")
  goalReferences     ProgressNoteGoalReference[]
  createdAt          DateTime    @default(now()) @map("created_at")
  updatedAt          DateTime    @updatedAt @map("updated_at")
  createdBy          BigInt?     @map("created_by")
  updatedBy          BigInt?     @map("updated_by")
  createdByUser      User?       @relation("ProgressNoteCreatedBy", fields: [createdBy], references: [id])
  updatedByUser      User?       @relation("ProgressNoteUpdatedBy", fields: [updatedBy], references: [id])

  @@map("progress_notes")
}

model ProgressNoteGoalReference {
  id             BigInt       @id @default(autoincrement())
  progressNoteId BigInt       @map("progress_note_id")
  progressNote   ProgressNote @relation(fields: [progressNoteId], references: [id])
  goalId         BigInt       @map("goal_id")
  goal           Goal         @relation(fields: [goalId], references: [id])
  progress       String?
  notes          String?

  @@unique([progressNoteId, goalId])
  @@map("progress_note_goal_references")
}

enum UserRole {
  ADMIN
  THERAPIST
  STAFF

  @@map("user_role")
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
  WAITLIST

  @@map("client_status")
}

enum LearnerStatus {
  ACTIVE
  INACTIVE
  ONHOLD
  COMPLETED

  @@map("learner_status")
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  
  @@map("priority")
}

enum CommunicationType {
  EMAIL
  SMS
  PHONE
  IN_PERSON
  VIDEO
  
  @@map("communication_type")
}

enum RecurrenceFrequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  CUSTOM
  
  @@map("recurrence_frequency")
}

enum TherapistRole {
  PRIMARY
  ASSISTANT
  SUPERVISOR
  OBSERVER
  
  @@map("therapist_role")
}

enum ServiceType {
  THERAPY
  ASSESSMENT
  CONSULTATION

  @@map("service_type")
}

enum WaitlistStatus {
  WAITING
  PLACED
  CANCELLED

  @@map("waitlist_status")
}

enum RelationshipType {
  PARENT
  GUARDIAN
  GRANDPARENT
  SIBLING
  OTHER_FAMILY
  CAREGIVER
  ADVOCATE
  OTHER

  @@map("relationship_type")
}

enum AssessmentType {
  ABLLS_R
  VB_MAPP
  ADOS_2
  CARS_2
  SCQ
  ADI_R
  BEHAVIOR_ASSESSMENT
  SKILL_ASSESSMENT
  FUNCTIONAL_ASSESSMENT
  ACADEMIC_ASSESSMENT
  CUSTOM
  OTHER

  @@map("assessment_type")
}

enum GoalStatus {
  NOT_STARTED
  IN_PROGRESS
  PARTIALLY_ACHIEVED
  ACHIEVED
  MODIFIED
  DISCONTINUED

  @@map("goal_status")
}

enum PlanStatus {
  DRAFT
  ACTIVE
  REVIEW
  COMPLETED
  ARCHIVED

  @@map("plan_status")
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  NEEDS_REVISION

  @@map("approval_status")
}
