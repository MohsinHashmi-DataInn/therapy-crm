generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model appointment_equipment {
  appointment_id    BigInt
  equipment_id      BigInt
  quantity          Int               @default(1)
  notes             String?
  created_at        DateTime          @default(now())
  appointments      appointments      @relation(fields: [appointment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  therapy_equipment therapy_equipment @relation(fields: [equipment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([appointment_id, equipment_id])
}

model appointment_group_participants {
  appointment_id BigInt
  learner_id     BigInt
  notes          String?
  created_at     DateTime     @default(now())
  appointments   appointments @relation(fields: [appointment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  learners       learners     @relation(fields: [learner_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([appointment_id, learner_id])
}

model appointment_recurrence_patterns {
  id                                                      BigInt               @id @default(autoincrement())
  frequency                                               recurrence_frequency
  interval                                                Int                  @default(1)
  days_of_week                                            String?
  start_date                                              DateTime
  end_date                                                DateTime?
  occurrence_count                                        Int?
  created_at                                              DateTime             @default(now())
  updated_at                                              DateTime
  created_by                                              BigInt?
  updated_by                                              BigInt?
  users_appointment_recurrence_patterns_created_byTousers users?               @relation("appointment_recurrence_patterns_created_byTousers", fields: [created_by], references: [id], onUpdate: NoAction, map: "fk_recurrence_patterns_created_by")
  users_appointment_recurrence_patterns_updated_byTousers users?               @relation("appointment_recurrence_patterns_updated_byTousers", fields: [updated_by], references: [id], onUpdate: NoAction, map: "fk_recurrence_patterns_updated_by")
  appointments                                            appointments[]
}

model appointment_staff {
  appointment_id BigInt
  user_id        BigInt
  role           therapist_role
  created_at     DateTime       @default(now())
  appointments   appointments   @relation(fields: [appointment_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_appointment_staff_appointment")
  users          users          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_appointment_staff_user")

  @@id([appointment_id, user_id])
}

model appointments {
  id                                     BigInt                           @id @default(autoincrement())
  title                                  String
  start_time                             DateTime
  end_time                               DateTime
  status                                 appointment_status               @default(SCHEDULED)
  location                               String?
  notes                                  String?
  client_id                              BigInt
  learner_id                             BigInt?
  therapist_id                           BigInt
  cancellation_reason                    String?
  created_at                             DateTime                         @default(now())
  updated_at                             DateTime
  created_by                             BigInt?
  updated_by                             BigInt?
  is_recurring                           Boolean                          @default(false)
  is_group_session                       Boolean                          @default(false)
  max_participants                       Int?
  room_id                                BigInt?
  recurrence_pattern_id                  BigInt?
  parent_appointment_id                  BigInt?
  appointment_equipment                  appointment_equipment[]
  appointment_group_participants         appointment_group_participants[]
  appointment_staff                      appointment_staff[]
  clients                                clients                          @relation(fields: [client_id], references: [id])
  users_appointments_created_byTousers   users?                           @relation("appointments_created_byTousers", fields: [created_by], references: [id])
  learners                               learners?                        @relation(fields: [learner_id], references: [id])
  users_appointments_therapist_idTousers users                            @relation("appointments_therapist_idTousers", fields: [therapist_id], references: [id])
  users_appointments_updated_byTousers   users?                           @relation("appointments_updated_byTousers", fields: [updated_by], references: [id])
  appointments                           appointments?                    @relation("appointmentsToappointments", fields: [parent_appointment_id], references: [id], onUpdate: NoAction, map: "fk_appointments_parent")
  other_appointments                     appointments[]                   @relation("appointmentsToappointments")
  appointment_recurrence_patterns        appointment_recurrence_patterns? @relation(fields: [recurrence_pattern_id], references: [id], onUpdate: NoAction, map: "fk_appointments_recurrence")
  therapy_rooms                          therapy_rooms?                   @relation(fields: [room_id], references: [id], onUpdate: NoAction, map: "fk_appointments_room")
  communications                         communications[]
}

model clients {
  id                                BigInt           @id @default(autoincrement())
  first_name                        String
  last_name                         String
  email                             String?          @unique
  phone                             String
  address                           String?
  status                            client_status    @default(ACTIVE)
  priority                          priority         @default(MEDIUM)
  notes                             String?
  therapist_id                      BigInt?
  created_at                        DateTime         @default(now())
  updated_at                        DateTime
  created_by                        BigInt?
  updated_by                        BigInt?
  appointments                      appointments[]
  users_clients_created_byTousers   users?           @relation("clients_created_byTousers", fields: [created_by], references: [id])
  users_clients_therapist_idTousers users?           @relation("clients_therapist_idTousers", fields: [therapist_id], references: [id])
  users_clients_updated_byTousers   users?           @relation("clients_updated_byTousers", fields: [updated_by], references: [id])
  communications                    communications[]
  learners                          learners[]
  waitlist                          waitlist?
}

model communications {
  id                                     BigInt             @id @default(autoincrement())
  type                                   communication_type
  subject                                String
  content                                String
  sent_at                                DateTime           @default(now())
  notes                                  String?
  client_id                              BigInt
  learner_id                             BigInt?
  appointment_id                         BigInt?
  user_id                                BigInt?
  created_at                             DateTime           @default(now())
  updated_at                             DateTime?
  created_by                             BigInt?
  updated_by                             BigInt?
  appointments                           appointments?      @relation(fields: [appointment_id], references: [id])
  clients                                clients            @relation(fields: [client_id], references: [id])
  users_communications_created_byTousers users?             @relation("communications_created_byTousers", fields: [created_by], references: [id])
  learners                               learners?          @relation(fields: [learner_id], references: [id])
  users_communications_updated_byTousers users?             @relation("communications_updated_byTousers", fields: [updated_by], references: [id])
  users_communications_user_idTousers    users?             @relation("communications_user_idTousers", fields: [user_id], references: [id])
}

model learners {
  id                                  BigInt                           @id @default(autoincrement())
  first_name                          String
  last_name                           String
  date_of_birth                       DateTime?
  gender                              String?
  course                              String?
  schedule                            String?
  status                              learner_status                   @default(ACTIVE)
  notes                               String?
  client_id                           BigInt
  instructor_id                       BigInt?
  created_at                          DateTime                         @default(now())
  updated_at                          DateTime
  created_by                          BigInt?
  updated_by                          BigInt?
  appointment_group_participants      appointment_group_participants[]
  appointments                        appointments[]
  communications                      communications[]
  clients                             clients                          @relation(fields: [client_id], references: [id])
  users_learners_created_byTousers    users?                           @relation("learners_created_byTousers", fields: [created_by], references: [id])
  users_learners_instructor_idTousers users?                           @relation("learners_instructor_idTousers", fields: [instructor_id], references: [id])
  users_learners_updated_byTousers    users?                           @relation("learners_updated_byTousers", fields: [updated_by], references: [id])
}

model notification_preferences {
  id                  BigInt   @id @default(autoincrement())
  user_id             BigInt   @unique
  email_notifications Boolean  @default(true)
  sms_notifications   Boolean  @default(false)
  push_notifications  Boolean  @default(false)
  created_at          DateTime @default(now())
  updated_at          DateTime
  users               users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model practice {
  id                     BigInt   @id @default(autoincrement())
  name                   String
  address                String?
  city                   String?
  state                  String?
  zip_code               String?
  phone                  String?
  email                  String?
  website                String?
  hours_of_operation     String?
  created_at             DateTime @default(now())
  updated_at             DateTime
  billing_address        String?
  billing_city           String?
  billing_email          String?
  billing_name           String?
  billing_state          String?
  billing_zip_code       String?
  stripe_customer_id     String?  @unique
  stripe_subscription_id String?  @unique
  subscription_status    String?  @default("inactive")
}

model therapy_equipment {
  id                                        BigInt                  @id @default(autoincrement())
  name                                      String
  description                               String?
  quantity                                  Int                     @default(1)
  is_available                              Boolean                 @default(true)
  notes                                     String?
  created_at                                DateTime                @default(now())
  updated_at                                DateTime
  created_by                                BigInt?
  updated_by                                BigInt?
  appointment_equipment                     appointment_equipment[]
  users_therapy_equipment_created_byTousers users?                  @relation("therapy_equipment_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_therapy_equipment_updated_byTousers users?                  @relation("therapy_equipment_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model therapy_rooms {
  id                                    BigInt         @id @default(autoincrement())
  name                                  String
  capacity                              Int?
  description                           String?
  equipment                             String?
  is_active                             Boolean        @default(true)
  created_at                            DateTime       @default(now())
  updated_at                            DateTime
  created_by                            BigInt?
  updated_by                            BigInt?
  appointments                          appointments[]
  users_therapy_rooms_created_byTousers users?         @relation("therapy_rooms_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_therapy_rooms_updated_byTousers users?         @relation("therapy_rooms_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id                                                                                BigInt                            @id @default(autoincrement())
  email                                                                             String                            @unique
  password                                                                          String
  first_name                                                                        String
  last_name                                                                         String
  phone                                                                             String?
  role                                                                              user_role                         @default(THERAPIST)
  is_active                                                                         Boolean                           @default(true)
  created_at                                                                        DateTime                          @default(now())
  updated_at                                                                        DateTime
  created_by                                                                        BigInt?
  updated_by                                                                        BigInt?
  appointment_recurrence_patterns_appointment_recurrence_patterns_created_byTousers appointment_recurrence_patterns[] @relation("appointment_recurrence_patterns_created_byTousers")
  appointment_recurrence_patterns_appointment_recurrence_patterns_updated_byTousers appointment_recurrence_patterns[] @relation("appointment_recurrence_patterns_updated_byTousers")
  appointment_staff                                                                 appointment_staff[]
  appointments_appointments_created_byTousers                                       appointments[]                    @relation("appointments_created_byTousers")
  appointments_appointments_therapist_idTousers                                     appointments[]                    @relation("appointments_therapist_idTousers")
  appointments_appointments_updated_byTousers                                       appointments[]                    @relation("appointments_updated_byTousers")
  clients_clients_created_byTousers                                                 clients[]                         @relation("clients_created_byTousers")
  clients_clients_therapist_idTousers                                               clients[]                         @relation("clients_therapist_idTousers")
  clients_clients_updated_byTousers                                                 clients[]                         @relation("clients_updated_byTousers")
  communications_communications_created_byTousers                                   communications[]                  @relation("communications_created_byTousers")
  communications_communications_updated_byTousers                                   communications[]                  @relation("communications_updated_byTousers")
  communications_communications_user_idTousers                                      communications[]                  @relation("communications_user_idTousers")
  learners_learners_created_byTousers                                               learners[]                        @relation("learners_created_byTousers")
  learners_learners_instructor_idTousers                                            learners[]                        @relation("learners_instructor_idTousers")
  learners_learners_updated_byTousers                                               learners[]                        @relation("learners_updated_byTousers")
  notification_preferences                                                          notification_preferences?
  therapy_equipment_therapy_equipment_created_byTousers                             therapy_equipment[]               @relation("therapy_equipment_created_byTousers")
  therapy_equipment_therapy_equipment_updated_byTousers                             therapy_equipment[]               @relation("therapy_equipment_updated_byTousers")
  therapy_rooms_therapy_rooms_created_byTousers                                     therapy_rooms[]                   @relation("therapy_rooms_created_byTousers")
  therapy_rooms_therapy_rooms_updated_byTousers                                     therapy_rooms[]                   @relation("therapy_rooms_updated_byTousers")
  users_users_created_byTousers                                                     users?                            @relation("users_created_byTousers", fields: [created_by], references: [id])
  other_users_users_created_byTousers                                               users[]                           @relation("users_created_byTousers")
  users_users_updated_byTousers                                                     users?                            @relation("users_updated_byTousers", fields: [updated_by], references: [id])
  other_users_users_updated_byTousers                                               users[]                           @relation("users_updated_byTousers")
  waitlist_waitlist_created_byTousers                                               waitlist[]                        @relation("waitlist_created_byTousers")
  waitlist_waitlist_updated_byTousers                                               waitlist[]                        @relation("waitlist_updated_byTousers")
}

model waitlist {
  id                               BigInt          @id @default(autoincrement())
  service_type                     service_type
  status                           waitlist_status @default(WAITING)
  request_date                     DateTime
  preferred_schedule               String?
  notes                            String?
  client_id                        BigInt          @unique
  created_at                       DateTime        @default(now())
  updated_at                       DateTime
  created_by                       BigInt?
  updated_by                       BigInt?
  clients                          clients         @relation(fields: [client_id], references: [id])
  users_waitlist_created_byTousers users?          @relation("waitlist_created_byTousers", fields: [created_by], references: [id])
  users_waitlist_updated_byTousers users?          @relation("waitlist_updated_byTousers", fields: [updated_by], references: [id])
}

enum appointment_status {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  NOSHOW
}

enum client_status {
  ACTIVE
  INACTIVE
  ARCHIVED
  WAITLIST
}

enum communication_type {
  EMAIL
  PHONE
  INPERSON
  VIDEO
  SMS
}

enum learner_status {
  ACTIVE
  INACTIVE
  ONHOLD
  COMPLETED
}

enum priority {
  HIGH
  MEDIUM
  LOW
}

enum recurrence_frequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  CUSTOM
}

enum service_type {
  THERAPY
  ASSESSMENT
  CONSULTATION
}

enum therapist_role {
  PRIMARY
  ASSISTANT
  SUPERVISOR
  OBSERVER
}

enum user_role {
  ADMIN
  THERAPIST
  STAFF
}

enum waitlist_status {
  WAITING
  PLACED
  CANCELLED
}
